{"ast":null,"code":"import _slicedToArray from\"/Users/danielloshkarev/Desktop/AdventureRoom/Adventure-Room/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useRef,useState,useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var isSafari=function isSafari(){var ua=navigator.userAgent.toLowerCase();return ua.indexOf(\"safari\")>-1&&ua.indexOf(\"chrome\")<0;};var mainVideo=\"/videos/Selfie1.m4v\";export default function App(){var videoParentRef=useRef();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),shouldUseImage=_useState2[0],setShouldUseImage=_useState2[1];useEffect(function(){// check if user agent is safari and we have the ref to the container <div />\nif(isSafari()&&videoParentRef.current){// obtain reference to the video element\nvar player=videoParentRef.current.children[0];// if the reference to video player has been obtained\nif(player){// set the video attributes using javascript as per the\n// webkit Policy\nplayer.controls=false;player.playsinline=true;player.muted=true;player.setAttribute(\"muted\",\"\");// leave no stones unturned :)\nplayer.autoplay=true;// Let's wait for an event loop tick and be async.\nsetTimeout(function(){// player.play() might return a promise but it's not guaranteed crossbrowser.\nvar promise=player.play();// let's play safe to ensure that if we do have a promise\nif(promise.then){promise.then(function(){}).catch(function(){// if promise fails, hide the video and fallback to <img> tag\nvideoParentRef.current.style.display=\"none\";setShouldUseImage(true);});}},0);}}},[]);return shouldUseImage?/*#__PURE__*/_jsx(\"img\",{src:mainVideo,alt:\"Muted Video\"}):/*#__PURE__*/_jsx(\"div\",{ref:videoParentRef,dangerouslySetInnerHTML:{__html:\"\\n        <video\\n          loop\\n          muted\\n          autoplay\\n          playsinline\\n          preload=\\\"metadata\\\"\\n        >\\n        <source src=\\\"\".concat(mainVideo,\"\\\" type=\\\"video/mp4\\\" />\\n        </video>\")}});}","map":{"version":3,"sources":["/Users/danielloshkarev/Desktop/AdventureRoom/Adventure-Room/src/components/NoAudio.js"],"names":["React","useRef","useState","useEffect","isSafari","ua","navigator","userAgent","toLowerCase","indexOf","mainVideo","App","videoParentRef","shouldUseImage","setShouldUseImage","current","player","children","controls","playsinline","muted","setAttribute","autoplay","setTimeout","promise","play","then","catch","style","display","__html"],"mappings":"iJAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,QAAxB,CAAkCC,SAAlC,KAAmD,OAAnD,C,2CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAMC,CAAAA,EAAE,CAAGC,SAAS,CAACC,SAAV,CAAoBC,WAApB,EAAX,CACA,MAAOH,CAAAA,EAAE,CAACI,OAAH,CAAW,QAAX,EAAuB,CAAC,CAAxB,EAA6BJ,EAAE,CAACI,OAAH,CAAW,QAAX,EAAuB,CAA3D,CACD,CAHD,CAKA,GAAMC,CAAAA,SAAS,CACb,qBADF,CAGA,cAAe,SAASC,CAAAA,GAAT,EAAe,CAC5B,GAAMC,CAAAA,cAAc,CAAGX,MAAM,EAA7B,CACA,cAA4CC,QAAQ,CAAC,KAAD,CAApD,wCAAOW,cAAP,eAAuBC,iBAAvB,eACAX,SAAS,CAAC,UAAM,CACd;AACA,GAAIC,QAAQ,IAAMQ,cAAc,CAACG,OAAjC,CAA0C,CACxC;AACA,GAAMC,CAAAA,MAAM,CAAGJ,cAAc,CAACG,OAAf,CAAuBE,QAAvB,CAAgC,CAAhC,CAAf,CAEA;AACA,GAAID,MAAJ,CAAY,CACV;AACA;AACAA,MAAM,CAACE,QAAP,CAAkB,KAAlB,CACAF,MAAM,CAACG,WAAP,CAAqB,IAArB,CACAH,MAAM,CAACI,KAAP,CAAe,IAAf,CACAJ,MAAM,CAACK,YAAP,CAAoB,OAApB,CAA6B,EAA7B,EAAkC;AAClCL,MAAM,CAACM,QAAP,CAAkB,IAAlB,CAEA;AACAC,UAAU,CAAC,UAAM,CACf;AACA,GAAMC,CAAAA,OAAO,CAAGR,MAAM,CAACS,IAAP,EAAhB,CACA;AACA,GAAID,OAAO,CAACE,IAAZ,CAAkB,CAChBF,OAAO,CACJE,IADH,CACQ,UAAM,CAAE,CADhB,EAEGC,KAFH,CAES,UAAM,CACX;AACAf,cAAc,CAACG,OAAf,CAAuBa,KAAvB,CAA6BC,OAA7B,CAAuC,MAAvC,CACAf,iBAAiB,CAAC,IAAD,CAAjB,CACD,CANH,EAOD,CACF,CAbS,CAaP,CAbO,CAAV,CAcD,CACF,CACF,CAjCQ,CAiCN,EAjCM,CAAT,CAmCA,MAAOD,CAAAA,cAAc,cACnB,YAAK,GAAG,CAAEH,SAAV,CAAqB,GAAG,CAAC,aAAzB,EADmB,cAGnB,YACE,GAAG,CAAEE,cADP,CAEE,uBAAuB,CAAE,CACvBkB,MAAM,0KAQSpB,SART,8CADiB,CAF3B,EAHF,CAmBD","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nconst isSafari = () => {\n  const ua = navigator.userAgent.toLowerCase();\n  return ua.indexOf(\"safari\") > -1 && ua.indexOf(\"chrome\") < 0;\n};\n\nconst mainVideo =\n  \"/videos/Selfie1.m4v\";\n\nexport default function App() {\n  const videoParentRef = useRef();\n  const [shouldUseImage, setShouldUseImage] = useState(false);\n  useEffect(() => {\n    // check if user agent is safari and we have the ref to the container <div />\n    if (isSafari() && videoParentRef.current) {\n      // obtain reference to the video element\n      const player = videoParentRef.current.children[0];\n\n      // if the reference to video player has been obtained\n      if (player) {\n        // set the video attributes using javascript as per the\n        // webkit Policy\n        player.controls = false;\n        player.playsinline = true;\n        player.muted = true;\n        player.setAttribute(\"muted\", \"\"); // leave no stones unturned :)\n        player.autoplay = true;\n\n        // Let's wait for an event loop tick and be async.\n        setTimeout(() => {\n          // player.play() might return a promise but it's not guaranteed crossbrowser.\n          const promise = player.play();\n          // let's play safe to ensure that if we do have a promise\n          if (promise.then) {\n            promise\n              .then(() => {})\n              .catch(() => {\n                // if promise fails, hide the video and fallback to <img> tag\n                videoParentRef.current.style.display = \"none\";\n                setShouldUseImage(true);\n              });\n          }\n        }, 0);\n      }\n    }\n  }, []);\n\n  return shouldUseImage ? (\n    <img src={mainVideo} alt=\"Muted Video\" />\n  ) : (\n    <div\n      ref={videoParentRef}\n      dangerouslySetInnerHTML={{\n        __html: `\n        <video\n          loop\n          muted\n          autoplay\n          playsinline\n          preload=\"metadata\"\n        >\n        <source src=\"${mainVideo}\" type=\"video/mp4\" />\n        </video>`\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}