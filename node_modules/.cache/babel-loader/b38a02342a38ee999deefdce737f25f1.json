{"ast":null,"code":"var _jsxFileName = \"/Users/danielloshkarev/Desktop/AdventureRoom/Adventure-Room/src/components/NoAudio.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isSafari = () => {\n  const ua = navigator.userAgent.toLowerCase();\n  return ua.indexOf(\"safari\") > -1 && ua.indexOf(\"chrome\") < 0;\n};\n\nconst mainVideo = \"/videos/Selfie1.m4v\";\nexport default function App() {\n  _s();\n\n  const videoParentRef = useRef();\n  const [shouldUseImage, setShouldUseImage] = useState(false);\n  useEffect(() => {\n    // check if user agent is safari and we have the ref to the container <div />\n    if (isSafari() && videoParentRef.current) {\n      // obtain reference to the video element\n      const player = videoParentRef.current.children[0]; // if the reference to video player has been obtained\n\n      if (player) {\n        // set the video attributes using javascript as per the\n        // webkit Policy\n        player.controls = false;\n        player.playsinline = true;\n        player.muted = true;\n        player.setAttribute(\"muted\", \"\"); // leave no stones unturned :)\n\n        player.autoplay = true; // Let's wait for an event loop tick and be async.\n\n        setTimeout(() => {\n          // player.play() might return a promise but it's not guaranteed crossbrowser.\n          const promise = player.play(); // let's play safe to ensure that if we do have a promise\n\n          if (promise.then) {\n            promise.then(() => {}).catch(() => {\n              // if promise fails, hide the video and fallback to <img> tag\n              videoParentRef.current.style.display = \"none\";\n              setShouldUseImage(true);\n            });\n          }\n        }, 0);\n      }\n    }\n  }, []);\n  return shouldUseImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n    src: mainVideo,\n    alt: \"Muted Video\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: videoParentRef,\n    dangerouslySetInnerHTML: {\n      __html: `\n        <video\n          loop\n          muted\n          autoplay\n          playsinline\n          preload=\"metadata\"\n        >\n        <source src=\"${mainVideo}\" type=\"video/mp4\" />\n        </video>`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5KalDFv7xV6eOP6X32L1OdjJOxU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/danielloshkarev/Desktop/AdventureRoom/Adventure-Room/src/components/NoAudio.js"],"names":["React","useRef","useState","useEffect","isSafari","ua","navigator","userAgent","toLowerCase","indexOf","mainVideo","App","videoParentRef","shouldUseImage","setShouldUseImage","current","player","children","controls","playsinline","muted","setAttribute","autoplay","setTimeout","promise","play","then","catch","style","display","__html"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,EAAE,GAAGC,SAAS,CAACC,SAAV,CAAoBC,WAApB,EAAX;AACA,SAAOH,EAAE,CAACI,OAAH,CAAW,QAAX,IAAuB,CAAC,CAAxB,IAA6BJ,EAAE,CAACI,OAAH,CAAW,QAAX,IAAuB,CAA3D;AACD,CAHD;;AAKA,MAAMC,SAAS,GACb,qBADF;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAMC,cAAc,GAAGX,MAAM,EAA7B;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,KAAD,CAApD;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIC,QAAQ,MAAMQ,cAAc,CAACG,OAAjC,EAA0C;AACxC;AACA,YAAMC,MAAM,GAAGJ,cAAc,CAACG,OAAf,CAAuBE,QAAvB,CAAgC,CAAhC,CAAf,CAFwC,CAIxC;;AACA,UAAID,MAAJ,EAAY;AACV;AACA;AACAA,QAAAA,MAAM,CAACE,QAAP,GAAkB,KAAlB;AACAF,QAAAA,MAAM,CAACG,WAAP,GAAqB,IAArB;AACAH,QAAAA,MAAM,CAACI,KAAP,GAAe,IAAf;AACAJ,QAAAA,MAAM,CAACK,YAAP,CAAoB,OAApB,EAA6B,EAA7B,EANU,CAMwB;;AAClCL,QAAAA,MAAM,CAACM,QAAP,GAAkB,IAAlB,CAPU,CASV;;AACAC,QAAAA,UAAU,CAAC,MAAM;AACf;AACA,gBAAMC,OAAO,GAAGR,MAAM,CAACS,IAAP,EAAhB,CAFe,CAGf;;AACA,cAAID,OAAO,CAACE,IAAZ,EAAkB;AAChBF,YAAAA,OAAO,CACJE,IADH,CACQ,MAAM,CAAE,CADhB,EAEGC,KAFH,CAES,MAAM;AACX;AACAf,cAAAA,cAAc,CAACG,OAAf,CAAuBa,KAAvB,CAA6BC,OAA7B,GAAuC,MAAvC;AACAf,cAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,aANH;AAOD;AACF,SAbS,EAaP,CAbO,CAAV;AAcD;AACF;AACF,GAjCQ,EAiCN,EAjCM,CAAT;AAmCA,SAAOD,cAAc,gBACnB;AAAK,IAAA,GAAG,EAAEH,SAAV;AAAqB,IAAA,GAAG,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,UADmB,gBAGnB;AACE,IAAA,GAAG,EAAEE,cADP;AAEE,IAAA,uBAAuB,EAAE;AACvBkB,MAAAA,MAAM,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuBpB,SAAU;AACjC;AAV+B;AAF3B;AAAA;AAAA;AAAA;AAAA,UAHF;AAmBD;;GAzDuBC,G;;KAAAA,G","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\n\nconst isSafari = () => {\n  const ua = navigator.userAgent.toLowerCase();\n  return ua.indexOf(\"safari\") > -1 && ua.indexOf(\"chrome\") < 0;\n};\n\nconst mainVideo =\n  \"/videos/Selfie1.m4v\";\n\nexport default function App() {\n  const videoParentRef = useRef();\n  const [shouldUseImage, setShouldUseImage] = useState(false);\n  useEffect(() => {\n    // check if user agent is safari and we have the ref to the container <div />\n    if (isSafari() && videoParentRef.current) {\n      // obtain reference to the video element\n      const player = videoParentRef.current.children[0];\n\n      // if the reference to video player has been obtained\n      if (player) {\n        // set the video attributes using javascript as per the\n        // webkit Policy\n        player.controls = false;\n        player.playsinline = true;\n        player.muted = true;\n        player.setAttribute(\"muted\", \"\"); // leave no stones unturned :)\n        player.autoplay = true;\n\n        // Let's wait for an event loop tick and be async.\n        setTimeout(() => {\n          // player.play() might return a promise but it's not guaranteed crossbrowser.\n          const promise = player.play();\n          // let's play safe to ensure that if we do have a promise\n          if (promise.then) {\n            promise\n              .then(() => {})\n              .catch(() => {\n                // if promise fails, hide the video and fallback to <img> tag\n                videoParentRef.current.style.display = \"none\";\n                setShouldUseImage(true);\n              });\n          }\n        }, 0);\n      }\n    }\n  }, []);\n\n  return shouldUseImage ? (\n    <img src={mainVideo} alt=\"Muted Video\" />\n  ) : (\n    <div\n      ref={videoParentRef}\n      dangerouslySetInnerHTML={{\n        __html: `\n        <video\n          loop\n          muted\n          autoplay\n          playsinline\n          preload=\"metadata\"\n        >\n        <source src=\"${mainVideo}\" type=\"video/mp4\" />\n        </video>`\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}